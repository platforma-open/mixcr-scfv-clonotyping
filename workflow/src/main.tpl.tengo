// "hello world"
wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets:= import("@platforma-sdk/workflow-tengo:assets")
render := import("@platforma-sdk/workflow-tengo:render")
maps := import("@platforma-sdk/workflow-tengo:maps")
smart := import("@platforma-sdk/workflow-tengo:smart")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
ll := import("@platforma-sdk/workflow-tengo:ll")

processTpl := assets.importTemplate(":process")
repseqioLibraryTpl := assets.importTemplate(":repseqio-library")


wf.body(func(args) {
	if !args.imputeHeavy && args.heavyAssemblingFeature != "CDR3:FR4" {
		ll.panic("imputeHeavy is false, but heavyAssemblingFeature is not CDR3:FR4")
	}
	if !args.imputeLight && args.lightAssemblingFeature != "CDR3:FR4" {
		ll.panic("imputeLight is false, but lightAssemblingFeature is not CDR3:FR4")
	}

	input := wf.resolve(args.input)

	// Optional per-chain reference libraries (only if both V and J provided)
	referenceLibraryHeavy := undefined
	referenceLibraryLight := undefined

	customLibrary := false

	if !is_undefined(args.heavyVGenes) && !is_undefined(args.heavyJGenes) && args.heavyVGenes != "" && args.heavyJGenes != "" {
		customLibrary = true
		heavyFiles := exec.builder().cmd("/usr/bin/env").arg("bash").
			writeFile("heavyV.fasta", args.heavyVGenes).saveFile("heavyV.fasta").
			writeFile("heavyJ.fasta", args.heavyJGenes).saveFile("heavyJ.fasta").
			run()
		referenceLibraryHeavyCmd := render.create(repseqioLibraryTpl, {
			vGeneFasta: heavyFiles.getFile("heavyV.fasta"),
			jGeneFasta: heavyFiles.getFile("heavyJ.fasta"),
			chains: "IGH"
		})
		referenceLibraryHeavy = referenceLibraryHeavyCmd.output("referenceLibrary")
	}

	ll.print("__THE_LOG__", referenceLibraryHeavy)
	if !is_undefined(args.lightVGenes) && !is_undefined(args.lightJGenes) && args.lightVGenes != "" && args.lightJGenes != "" {
		lightFiles := exec.builder().cmd("/usr/bin/env").arg("bash").
			writeFile("lightV.fasta", args.lightVGenes).saveFile("lightV.fasta").
			writeFile("lightJ.fasta", args.lightJGenes).saveFile("lightJ.fasta").
			run()
		referenceLibraryLightCmd := render.create(repseqioLibraryTpl, {
			vGeneFasta: lightFiles.getFile("lightV.fasta"),
			jGeneFasta: lightFiles.getFile("lightJ.fasta"),
			chains: "IGK"
		})
		referenceLibraryLight = referenceLibraryLightCmd.output("referenceLibrary")
	}

	
	// keep separate heavy/light libraries; do not merge

	runMixcr := render.createEphemeral(processTpl, {
		inputSpec: input.getFutureInputField("spec"),
		inputData: input.getFutureInputField("data"),
		customLibrary: customLibrary,
		species: args.species,
		linker: args.linker,
		hinge: args.hinge,
		order: args.order,
		imputeHeavy: args.imputeHeavy,
		heavyImputeSequence: args.heavyImputeSequence,
		imputeLight: args.imputeLight,
		lightImputeSequence: args.lightImputeSequence,
  		heavyTagPattern: args.heavyTagPattern,
  		heavyAssemblingFeature: args.heavyAssemblingFeature,
  		lightTagPattern: args.lightTagPattern,
  		lightAssemblingFeature: args.lightAssemblingFeature,
		blockId: wf.blockId().getDataAsJson(),
		limitInput: args.limitInput,
		referenceLibraryHeavy: referenceLibraryHeavy,
		referenceLibraryLight: referenceLibraryLight
	})

	exports := {
		clones: runMixcr.output("clonotypes")
	}

	outputs := {}
	for chain in ["IGHeavy", "IGLight"] {
		outputs["logs" + chain] = runMixcr.output("logs" + chain + ".data")
		outputs["qc" + chain] = pframes.exportColumnData(runMixcr.output("qc" + chain + ".data"))
		outputs["reports" + chain ] = pframes.exportColumnData(runMixcr.output("reports" + chain + ".data"))
	}

	return {
		outputs: outputs,
		exports: exports
	}
})

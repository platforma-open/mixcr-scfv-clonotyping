// repseqio-library template for generating reference library from V and J FASTA files

self := import("@platforma-sdk/workflow-tengo:tpl")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets := import("@platforma-sdk/workflow-tengo:assets")

repseqioSw := assets.importSoftware("@platforma-open/milaboratories.software-repseqio:main")

self.defineOutputs("referenceLibrary")

self.body(func(inputs) {
    vGeneFasta := inputs.vGeneFasta
    jGeneFasta := inputs.jGeneFasta
    chains := inputs.chains // e.g. "IGH" or "IGK"

    repseqioVgeneCmd := exec.builder().
        software(repseqioSw).
        arg("fromFasta").
        arg("--chain").arg(chains).
        arg("--gene-type").arg("V").
        arg("--species-name").arg("custom").
        arg("--taxon-id").arg("1111").
        arg("--gene-feature").arg("VRegion").
        arg("--name-index").arg("0").
        arg("vGene.fasta").addFile("vGene.fasta", vGeneFasta).
        arg("vGene.json").saveFile("vGene.json").
        cpu(1).mem("4GB")

    repseqioVgeneResult := repseqioVgeneCmd.run()
    referenceLibraryVgene := repseqioVgeneResult.getFile("vGene.json")

    repseqioJgeneCmd := exec.builder().
        software(repseqioSw).
        arg("fromFasta").
        arg("--chain").arg(chains).
        arg("--gene-type").arg("J").
        arg("--species-name").arg("custom").
        arg("--taxon-id").arg("1111").
        arg("--gene-feature").arg("JRegion").
        arg("--name-index").arg("0").
        arg("jGene.fasta").addFile("jGene.fasta", jGeneFasta).
        arg("jGene.json").saveFile("jGene.json").
        cpu(1).mem("4GB")

    repseqioJgeneResult := repseqioJgeneCmd.run()
    referenceLibraryJgene := repseqioJgeneResult.getFile("jGene.json")

    repseqioMergeCmd := exec.builder().
        software(repseqioSw).
        arg("merge").
        addFile("vGene.json", referenceLibraryVgene).
        addFile("jGene.json", referenceLibraryJgene).
        arg("vGene.json").
        arg("jGene.json").
        arg("referenceLibrary.json").
        saveFile("referenceLibrary.json").
        cpu(1).mem("4GB")

    repseqioMergeResult := repseqioMergeCmd.run()
    referenceLibrary := repseqioMergeResult.getFile("referenceLibrary.json")

    return {
        referenceLibrary: referenceLibrary
    }
})


